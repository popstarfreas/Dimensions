"use strict"
exports.ConfigSettings = {
    servers: [{
        // The port to listen on for this ListenServer.
        // You can add as many as you want, as long as they
        // are on different ports.
        // If you want to load balance one port among many processes
        // use something like pm2
        listenPort: 7777,
        
        // The list of servers to load-balance between. When someone uses the listenPort
        // the server will use the routingServer with the lowest player count and route them
        // to it. Domains in the serverIP section are also supported.
        // The name of each routingServer must be unique! Even if they are on a different ListenServer.
        routingServers: [{
            name: "sharda",
            serverIP: "127.0.0.1",
            serverPort: 7778
        },
        {
            name: "shardb",
            serverIP: "127.0.0.1",
            serverPort: 7779
        }]
    },
    ],
    options: {
        /* The number of millseconds of inactivity before a client socket is
         * destroyed */
        socketTimeout: 1000*15,

        // Whether or not to disable Nagle's Algorithm (https://en.wikipedia.org/wiki/Nagle's_algorithm)
        socketNoDelay: true,

        /* The current Terraria version (used in switching, if incorrect
         * players will not be able to switch) */
        currentTerrariaVersion: 187,

        /* You can use this when small patches to Terraria are made
         * that do not break compatibility with the server */
        fakeVersion: {
            enabled: false,
            terrariaVersion: 173
        },

        // Whether or not to enable a "/v2/status"-like http server 
        restApi: {
            enabled: false,
            port: 7880
        },

        /* Whether or not to block invisibility buff.
         * This was added here because TShock's version is broken */
        blockInvis: false,

        // Whether or not to use a blacklist (http service) (for blocking vpn, etc)
        blacklist: {
            enabled: false,
            apiKey: ""
        },

        // Logging options
        log: {
            clientTimeouts: false,
            clientConnect: false,
            clientDisconnect: false,
            clientError: false,
            tServerConnect: false,
            tServerDisconnect: false,
            tServerError: false,
            extensionLoad: true,
            outputToConsole: true
        }
    }
};
