import Client from "dimensions/client";
import PacketWriter from "dimensions/packets/packetwriter";
import PacketTypes from "dimensions/packettypes";

class ClearUtils {
  public static clearPlayers(client: Client): void {
    const playerIDs: string[] = Object.keys(client.server.entityTracking.players);
    for (var i = 0, len = playerIDs.length; i < len; i++) {
      if (parseInt(playerIDs[i]) === client.player.id)
        continue;

      ClearUtils.clearPlayer(client, parseInt(playerIDs[i]));
    }
  }

  public static clearPlayer(client: Client, playerIndex: number): void {
    const playerActive = new PacketWriter()
      .setType(PacketTypes.PlayerActive)
      .packByte(playerIndex)
      .packByte(0) // Active
      .data;
      const packet = { packetType: PacketTypes.PlayerActive, data: playerActive };
      if (!client.server.getPacketHandler().handlePacket(client.server, packet)) {
        client.socket.write(packet.data);
      }
  }

  public static clearNPCs(client: Client): void {
    for (const npc of client.server.entityTracking.NPCs) {
      if (typeof npc !== "undefined") {
        ClearUtils.clearNPC(client, npc.index);
      }
    }
  }

  public static clearNPC(client: Client, npcIndex: number): void {
    const updateNPC = new PacketWriter()
      .setType(PacketTypes.NPCUpdate)
      .packInt16(npcIndex)
      .packSingle(0) // PositionX
      .packSingle(0) // PositionY
      .packSingle(0) // VelocityX
      .packSingle(0) // VelocityY
      .packUInt16(0) // Target
      .packByte(0) // Flags
      .packByte(0) // Flags 2
      .packInt16(0) // NPC NetID
      .packByte(4) // Life ByteSize
      .packInt32(0) // Life
      .packByte(0)
      .data;
    const packet = { packetType: PacketTypes.NPCUpdate, data: updateNPC };
    if (!client.server.getPacketHandler().handlePacket(client.server, packet)) {
      client.socket.write(packet.data);
    }
    client.server.entityTracking.NPCs[npcIndex] = undefined;
  }

  public static clearItems(client: Client): void {
    for (const item of client.server.entityTracking.items) {
      if (typeof item !== "undefined") {
        ClearUtils.clearItem(client, item.slot);
      }
    }
  }

  public static clearItem(client: Client, itemIndex: number): void {
    const updateItemDrop = {
      data: new PacketWriter()
        .setType(PacketTypes.UpdateItemDrop)
        .packInt16(itemIndex)
        .packSingle(0) // PositionX
        .packSingle(0) // PositionY
        .packSingle(0) // VelocityX
        .packSingle(0) // VelocityY
        .packInt16(0) // Stacks
        .packByte(0) // Prefix
        .packByte(0) // NoDelay
        .packInt16(0)
        .data,
      packetType: PacketTypes.UpdateItemDrop,
    };
    if (!client.server.getPacketHandler().handlePacket(client.server, updateItemDrop)) {
      client.socket.write(updateItemDrop.data);
    }
  }
}

export default ClearUtils;
