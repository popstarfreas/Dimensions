import * as http from 'http';
import { Dictionary } from 'dimensions/dictionary';

export interface BlackListCache {
    isHostIP: boolean;
    expires: number;
}

/**
 * Used to query a http blacklist to see if an IP is blocked or not
 */
class Blacklist {
    private _cache: Dictionary<BlackListCache> = {};

    public get cache() {
        return this._cache;
    }

    /**
     * Checks whether or not an IP address is a host IP (and is therefore blocked)
     * 
     * @param ip The ip to check whether or not it is a host ip
     * @param key The api key to use
     * @return Whether or not the ip is a host ip
     */
    public checkIP(ip: string, key: string): Promise<boolean> {
        return new Promise<boolean>((resolve: (isHostIp: boolean) => void, reject) => {
            if (typeof this._cache[ip] !== 'undefined' && this._cache[ip].expires > Date.now()) {
                resolve(this._cache[ip].isHostIP);
                return;
            }

            http.get(`http://tools.xioax.com/networking/ip/${ip}/${key}`, (res) => {
                let data = "";
                res.on("data", (chunk) => {
                    data += chunk;
                });

                res.on("end", () => {
                    this.parseResponse(ip, data, resolve, reject);
                });
            }).on('error', (e) => {
                reject(e);
            });
        });
    }

    /**
     * Parses a response from the http-based blacklist
     * 
     * @param ip The ip that was checked
     * @param data The data that was returned in the response
     * @param resolve The resolution function containing if the ip is not a host ip
     * @param reject The rejection function if an error occured
     */
    private parseResponse(ip: string, data: string, resolve: (value: boolean) => void, reject: (error: unknown) => void): void {
        let resDetails: any;
        try {
            resDetails = JSON.parse(data);
        } catch(e) {
            reject(e);
            return;
        }

        if (resDetails.status !== 'success') {
            reject(new Error("Invalid API call."));
        } else {
            let expireTime = Date.now();
            expireTime += 1000 * 60 * 30;
            this.cache[ip] = {
                isHostIP: resDetails["host-ip"],
                expires: expireTime
            };
            resolve(resDetails["host-ip"] ?? false);
        }
    }
}

export default Blacklist;