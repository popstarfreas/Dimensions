import PacketTypes from 'dimensions/packettypes';
import PacketWriter from 'dimensions/packets/packetwriter';
import PacketReader from 'dimensions/packets/packetreader';
import NPC from 'dimensions/npc';
import Item from 'dimensions/item';
import Client from 'dimensions/client';
import RawPacket from 'dimensions/packets/rawpacket';
import {Command} from 'dimensions/clientcommandhandler';
import ClientState from 'dimensions/clientstate';

class ClientPacketHandler {
  private currentClient!: Client;

  /* Checks whether the packet was handled by extensions prior to being processed by this class */
  private runPriorHandlers(client: Client, packet: RawPacket): boolean {
    let handlers = client.globalHandlers.extensions;
    let handled = false;
    for (let key in handlers) {
      let handler = handlers[key];
      if (typeof handler.priorPacketHandlers !== 'undefined' && typeof handler.priorPacketHandlers.clientHandler !== 'undefined') {
        handled = handler.priorPacketHandlers.clientHandler.handlePacket(client, packet);
        if (handled) {
          break;
        }
      }
    }

    return handled;
  }

  /* Checks whether the packet was handled by extensions after being processed by this class */
  private runPostHandlers(client: Client, packet: RawPacket): boolean {
    let handlers = client.globalHandlers.extensions;
    let handled = false;
    for (let key in handlers) {
      let handler = handlers[key];
      if (typeof handler.postPacketHandlers !== 'undefined' && typeof handler.postPacketHandlers.clientHandler !== 'undefined') {
        handled = handler.postPacketHandlers.clientHandler.handlePacket(client, packet);
        if (handled) {
          break;
        }
      }
    }

    return handled;
  }

  /* Runs the packet through extension handlers and runs any appropriate handlers of this class */
  public handlePacket(client: Client, rawPacket: RawPacket): Buffer | null {
    let priorHandled: boolean = this.runPriorHandlers(client, rawPacket);
    if (priorHandled) {
      return null;
    }

    let packetType: number = rawPacket.packetType;
    let handled: boolean = false;

    // Set current client while we handle this packet
    this.currentClient = client;
    switch (packetType) {
      case PacketTypes.ConnectRequest:
        handled = this.handleConnectRequest(rawPacket);
        break;

      case PacketTypes.PlayerInfo:
        handled = this.handlePlayerInfo(rawPacket);
        break;

      case PacketTypes.UpdatePlayerBuff:
        handled = this.handleUpdatePlayerBuff(rawPacket);
        break;

      case PacketTypes.AddPlayerBuff:
        handled = this.handleAddPlayerBuff(rawPacket);
        break;

      case PacketTypes.PlayerInventorySlot:
        handled = this.handlePlayerInventorySlot(rawPacket);
        break;

      case PacketTypes.PlayerMana:
        handled = this.handlePlayerMana(rawPacket);
        break;

      case PacketTypes.PlayerHP:
        handled = this.handlePlayerHP(rawPacket);
        break;

      case PacketTypes.UpdatePlayer:
        handled = this.handleUpdatePlayer(rawPacket);
        break;

      case PacketTypes.UpdateItemDrop:
        handled = this.handleUpdateItemDrop(rawPacket);
        break;

      case PacketTypes.UpdateItemOwner:
        handled = this.handleUpdateItemOwner(rawPacket);
        break;

      case PacketTypes.ContinueConnecting2:
        if (this.currentClient.state === ClientState.FreshConnection) {
          // Finished sending inventory
          this.currentClient.state = ClientState.FinishinedSendingInventory;
        }
        break;

      case PacketTypes.SpawnPlayer:
        handled = this.handleSpawnPlayer(rawPacket);
        break;

      case PacketTypes.LoadNetModule:
        handled = this.handleLoadNetModule(rawPacket);
        break;

      case PacketTypes.DimensionsUpdate:
        // Client cannot send 67 (It's used by Dimensions to communicate special info)
        handled = true;
        break;

      case PacketTypes.ClientUUID:
        handled = this.handleClientUUID(rawPacket);
        break;

      case PacketTypes.SetPlayerStealth:
      case PacketTypes.PlayerHurtV2:
      case PacketTypes.PlayerZone:
        handled = this.handlePotentialEarlyPacket(rawPacket);
        break;
    }

    if (handled) {
      return null;
    }

    let postHandled: boolean = this.runPostHandlers(client, rawPacket);
    if (postHandled) {
      return null;
    }

    return rawPacket.data;
  }

  private handleConnectRequest(packet: RawPacket): boolean {
    if (this.currentClient.version === "unknown") {
      const reader = new PacketReader(packet.data);
      this.currentClient.version = reader.readString();
      return false;
    } else {
      return true;
    }
  }

  /* Updates tracked visuals for player to restore them when they switch from
   * an SSC to a non-SSC server */
  private handlePlayerInfo(packet: RawPacket): boolean {
    const reader = new PacketReader(packet.data);
    reader.readByte(); // Player ID
    const skinVariant = reader.readByte();
    let hair = reader.readByte();
    if (hair > 134) {
      hair = 0;
    }
    const name = reader.readString();
    const hairDye = reader.readByte();
    const hideVisuals = reader.readByte();
    const hideVisuals2 = reader.readByte();
    const hideMisc = reader.readByte();
    const hairColor = reader.readColor();
    const skinColor = reader.readColor();
    const eyeColor = reader.readColor();
    const shirtColor = reader.readColor();
    const underShirtColor = reader.readColor();
    const pantsColor = reader.readColor();
    const shoeColor = reader.readColor();
    const difficulty = reader.readByte();
    const torchFlags = reader.readByte();

    const player = this.currentClient.player;
    if (player.name !== name) {
      if (player.allowedNameChange) {
        this.currentClient.setName(name);
      } else if (this.currentClient.options.nameChanges?.mode === "rewrite") {
        const playerInfo = new PacketWriter()
          .setType(PacketTypes.PlayerInfo)
          .packByte(this.currentClient.player.id)
          .packByte(skinVariant)
          .packByte(hair)
          .packString(player.name)
          .packByte(hairDye)
          .packByte(hideVisuals)
          .packByte(hideVisuals2)
          .packByte(hideMisc)
          .packColor(hairColor)
          .packColor(skinColor)
          .packColor(eyeColor)
          .packColor(shirtColor)
          .packColor(underShirtColor)
          .packColor(pantsColor)
          .packColor(shoeColor)
          .packByte(difficulty)
          .packByte(torchFlags)
          .data;
          packet.data = playerInfo;
      }
    }

    if (player.allowedCharacterChange) {
      player.skinVariant = skinVariant;
      player.hair = hair;
      player.hairDye = hairDye;
      player.hideVisuals = hideVisuals;
      player.hideVisuals2 = hideVisuals2;
      player.hideMisc = hideMisc;
      player.hairColor = hairColor;
      player.skinColor = skinColor;
      player.eyeColor = eyeColor;
      player.shirtColor = shirtColor;
      player.underShirtColor = underShirtColor;
      player.pantsColor = pantsColor;
      player.shoeColor = shoeColor;
      player.difficulty = difficulty;
      player.allowedCharacterChange = false;
    }

    return false;
  }

  /* Used to prevent invisibility buff from being sent to the server
   * for used when the config is set to blockInvis = true */
  private handleUpdatePlayerBuff(packet: RawPacket): boolean {
    let reader: PacketReader = new PacketReader(packet.data);
    let playerID: number = reader.readByte();

    if (this.currentClient.options.blockInvis) {
      var updatePlayerBuff: PacketWriter = new PacketWriter()
        .setType(PacketTypes.UpdatePlayerBuff)
        .packByte(playerID);

      for (let i: number = 0; i < 22; i++) {
        if (reader.data.length !== 0) {
          let buffType: number = reader.readUInt16();
          if (buffType !== 10) {
            updatePlayerBuff.packUInt16(buffType);
          } else {
            updatePlayerBuff.packUInt16(0);
          }
        }
      }

      packet.data = updatePlayerBuff.data;
    }

    // Prevent this being sent too early (causing kicked for invalid operation)
    if (this.currentClient.state !== ClientState.FullyConnected) {
      this.currentClient.packetQueue.push(packet.data);
      return true;
    }

    return false;
  }

  /* Used to prevent invisibility buff from being sent to the server
   * for used when the config is set to blockInvis = true */
  private handleAddPlayerBuff(packet: RawPacket): boolean {
    let reader: PacketReader = new PacketReader(packet.data);
    let playerID: number = reader.readByte();
    let buffID: number = reader.readUInt16();

    if (this.currentClient.options.blockInvis) {
      return buffID === 10;
    } else {
      return false;
    }
  }

  /* Tracks the players inventory slots to restore them when they switch
   * from an SSC server to a Non-SSC server */
  private handlePlayerInventorySlot(packet: RawPacket): boolean {
    if ((this.currentClient.state === ClientState.FreshConnection || this.currentClient.state === ClientState.ConnectionSwitchEstablished) && !this.currentClient.waitingCharacterRestore) {
      let reader: PacketReader = new PacketReader(packet.data);
      let playerID: number = reader.readByte();
      let slotID: number = reader.readInt16();
      let stack: number = reader.readInt16();
      let prefix: number = reader.readByte();
      let netID: number = reader.readInt16();
      this.currentClient.player.inventory[slotID] = new Item(slotID, stack, prefix, netID);
    }

    return false;
  }

  /* Tracks the player mana to restore it when they switch from an
   * SSC server to a Non-SSC server */
  private handlePlayerMana(packet: RawPacket): boolean {
    if (!this.currentClient.player.allowedManaChange)
      return false;

    // Read mana sent and then set the player object mana
    let reader: PacketReader = new PacketReader(packet.data);
    reader.readByte();
    reader.readInt16();
    let mana: number = reader.readInt16();
    this.currentClient.player.mana = mana;
    this.currentClient.player.allowedManaChange = false;

    return false;
  }

  /* Tracks the player HP to restore it when they switch from an
   * SSC server to a Non-SSC server */
  private handlePlayerHP(packet: RawPacket): boolean {
    if (!this.currentClient.player.allowedLifeChange) {
      return false;
    }

    // Read life sent and then set the player object life
    let reader: PacketReader = new PacketReader(packet.data);
    reader.readByte();
    reader.readInt16();
    let life: number = reader.readInt16();
    this.currentClient.player.life = life;
    this.currentClient.player.allowedLifeChange = false;

    // Prevent this being sent too early (causing kicked for invalid operation)
    if (this.currentClient.state !== ClientState.FullyConnected) {
      this.currentClient.packetQueue.push(packet.data);
      return true;
    }

    return false;
  }

  private handleUpdatePlayer(packet: RawPacket): boolean {
    let reader: PacketReader = new PacketReader(packet.data);
    reader.readByte(); // playerId
    reader.readByte(); // control
    reader.readByte(); // pulley
    reader.readByte(); // misc
    reader.readByte(); // sleeping info
    reader.readByte(); // selected item
    this.currentClient.player.position.x = reader.readSingle();
    this.currentClient.player.position.y = reader.readSingle();

    // Prevent this being sent too early (causing kicked for invalid operation)
    if (this.currentClient.state !== ClientState.FullyConnected) {
      this.currentClient.packetQueue.push(packet.data);
      return true;
    }

    return false;
  }

  /* Prevents the player sending the item drop packet too early
   * which causes them to be kicked. It also adds it to the packet queue
   * so that it may be sent when the client has fully connected (and wont
   * get kicked for sending it) */
  private handleUpdateItemDrop(packet: RawPacket): boolean {
    // Prevent this being sent too early (causing kicked for invalid operation)
    if (this.currentClient.state !== ClientState.FullyConnected) {
      this.currentClient.packetQueue.push(packet.data);
      return true;
    }

    return false;
  }

  /* Prevents the player sending the item owner packet too early
   * which causes them to be kicked. It also adds it to the packet queue
   * so that it may be sent when the client has fully connected (and wont
   * get kicked for sending it)
   *
   * Note: This packet is important for tShock SSC to work. If this was
   *       prevented outright, SSC would be broken (inventory would be unchangable) */
  private handleUpdateItemOwner(packet: RawPacket): boolean {
    // Prevent this being sent too early (causing kicked for invalid operation)
    if (this.currentClient.state !== ClientState.FullyConnected) {
      this.currentClient.packetQueue.push(packet.data);
      return true;
    }

    return false;
  }

  private handleSpawnPlayer(packet: RawPacket): boolean {
    if (this.currentClient.state === ClientState.FinishinedSendingInventory) {
        this.currentClient.state = ClientState.FullyConnected;
    }

    return false;
  }

  /* Handles when a net module update is sent from the client (used only for chat at this time) */
  private handleLoadNetModule(packet: RawPacket): boolean {
    let handled = false;
    let reader = new PacketReader(packet.data);
    let moduleId = reader.readUInt16();

    if (moduleId === 1) {
      // ID is either Say or Emote
      let commandId = reader.readString();
      let chatMessage = reader.readString();
      handled = this.handleChatMessage(chatMessage);
    }

    return handled;
  }

  /* Handles any commands sent by the client given they start with "/" */
  private handleChatMessage(chatMessage: string): boolean {
    let handled = false;

    // If chat message is a command
    if (chatMessage.length > 1 && chatMessage.substr(0, 1) === "/") {
      let command: Command = this.currentClient.globalHandlers.command.parseCommand(chatMessage);
      handled = this.currentClient.globalHandlers.command.handle(command, this.currentClient);
    }

    return handled;
  }

  /* Updates the clients current tracked UUID */
  private handleClientUUID(packet: RawPacket): boolean {
    let reader: PacketReader = new PacketReader(packet.data);
    this.currentClient.UUID = reader.readString();

    return false;
  }

  /* Some packets should not be sent early to avoid kick for invalid operation at this state */
  private handlePotentialEarlyPacket(packet: RawPacket): boolean {
    // Prevent this being sent too early (causing kicked for invalid operation)
    if (this.currentClient.state !== ClientState.FullyConnected) {
      this.currentClient.packetQueue.push(packet.data);
      return true;
    }

    return false;
  }

}

export default ClientPacketHandler;
