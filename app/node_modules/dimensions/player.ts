import Item from 'dimensions/item';
import Client from 'dimensions/client';
import PacketWriter from 'dimensions/packets/packetwriter';
import PacketTypes from 'dimensions/packettypes';
import Color from 'dimensions/color';
import { getPackedStringByteLen } from 'dimensions/utils';

class Player {
	public id: number;
	public name: string;
	public inventory: (Item | undefined)[];
	public life: number;
	public mana: number;
	public allowedNameChange: boolean;
	public allowedCharacterChange: boolean;
	public allowedLifeChange: boolean;
	public allowedManaChange: boolean;
	public position: { x: number, y: number } = {
		x: 0,
		y: 0
	};

	// Visuals
	public skinVariant: number = 0;
	public hair: number = 0;
	public hairDye: number = 0;
	public hideVisuals: number = 0;
	public hideVisuals2: number = 0;
	public hideMisc: number = 0;
	public hairColor: Color = { R: 0, G: 0, B: 0 };
	public skinColor: Color = { R: 0, G: 0, B: 0 };
	public eyeColor: Color = { R: 0, G: 0, B: 0 };
	public shirtColor: Color = { R: 0, G: 0, B: 0 };
	public underShirtColor: Color = { R: 0, G: 0, B: 0 };
	public pantsColor: Color = { R: 0, G: 0, B: 0 };
	public shoeColor: Color = { R: 0, G: 0, B: 0 };
	private client: Client | null;

	// Soft/Med/Hard core
	public difficulty: number = 0;

	constructor(client: Client | null) {
		this.client = client;
		this.id = 0;
		this.name = "";
		this.life = 100;
		this.mana = 20;
		this.allowedNameChange = false;
		this.allowedCharacterChange = false;
		this.allowedLifeChange = false;
		this.allowedManaChange = false;

		// Inventory of Client - only used for SSC -> to Non-SSC switching
		this.inventory = [];
	}

	public setItem(item: Item): void {
		if (this.client === null) {
			return;
		}

		let playerInventorySlot = new PacketWriter()
			.setType(PacketTypes.PlayerInventorySlot)
			.packByte(this.id)
			.packInt16(item.slot)
			.packInt16(item.stack)
			.packByte(item.prefix)
			.packInt16(item.netID)
			.data;

		this.client.socket.write(playerInventorySlot);
  	}

	  public setLife(life: number): void {
		if (this.client === null) {
			return;
		}

		let playerLife = new PacketWriter()
			.setType(PacketTypes.PlayerHP)
			.packByte(this.id)
			.packInt16(this.life)
			.packInt16(this.life)
			.data;

		this.client.socket.write(playerLife);
	}

	public setMana(mana: number): void {
		if (this.client === null) {
			return;
		}

		let playerMana = new PacketWriter()
			.setType(PacketTypes.PlayerMana)
			.packByte(this.id)
			.packInt16(this.mana)
			.packInt16(this.mana)
			.data;

		this.client.socket.write(playerMana);
	}

	public setVisuals(): void {
		if (this.client === null) {
			return;
		}

		let playerInfo = new PacketWriter()
			.setType(PacketTypes.PlayerInfo)
			.packByte(this.id)
			.packByte(this.skinVariant)
			.packByte(this.hair)
			.packString(this.name)
			.packByte(this.hairDye)
			.packByte(this.hideVisuals)
			.packByte(this.hideVisuals2)
			.packByte(this.hideMisc)
			.packColor(this.hairColor) 
			.packColor(this.skinColor) 
			.packColor(this.eyeColor) 
			.packColor(this.shirtColor) 
			.packColor(this.underShirtColor) 
			.packColor(this.pantsColor)
			.packColor(this.shoeColor)
			.packByte(this.difficulty)
			.data;

		this.client.socket.write(playerInfo);
	}
}

export default Player;
