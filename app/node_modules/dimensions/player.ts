import Item from 'dimensions/item';
import Client from 'dimensions/client';
import PacketWriter from 'dimensions/packets/packetwriter';
import PacketTypes from 'dimensions/packettypes';
import Color from 'dimensions/color';
import * as PlayerInfo from "rescript-terrariapacket/src/packet/Packet_PlayerInfo.gen";
type Difficulty = PlayerInfo.difficulty
type Mode = PlayerInfo.mode

class Player {
	public id: number;
	public name: string;
	public inventory: (Item | undefined)[];
	public life: number;
	public mana: number;
	public allowedNameChange: boolean;
	public allowedCharacterChange: boolean;
	public allowedLifeChange: boolean;
	public allowedManaChange: boolean;
	public position: { x: number, y: number } = {
		x: 0,
		y: 0
	};

	// Visuals
	public skinVariant: number = 0;
	public hair: number = 0;
	public hairDye: number = 0;
	public hideVisuals: number = 0;
	public hideVisuals2: number = 0;
	public hideMisc: number = 0;
	public hairColor: Color = { R: 0, G: 0, B: 0 };
	public skinColor: Color = { R: 0, G: 0, B: 0 };
	public eyeColor: Color = { R: 0, G: 0, B: 0 };
	public shirtColor: Color = { R: 0, G: 0, B: 0 };
	public underShirtColor: Color = { R: 0, G: 0, B: 0 };
	public pantsColor: Color = { R: 0, G: 0, B: 0 };
	public shoeColor: Color = { R: 0, G: 0, B: 0 };
	public extraAccessory: boolean = false;
	public usingBiomeTorches: boolean = false;
	public unlockedBiomeTorches: boolean = false;
	public happyFunTorchTime: boolean = false;
	private client: Client | null;

	public difficulty: Difficulty = "Softcore";
	public mode: Mode = "Classic";

	constructor(client: Client | null) {
		this.client = client;
		this.id = 0;
		this.name = "";
		this.life = 100;
		this.mana = 20;
		this.allowedNameChange = false;
		this.allowedCharacterChange = false;
		this.allowedLifeChange = false;
		this.allowedManaChange = false;

		// Inventory of Client - only used for SSC -> to Non-SSC switching
		this.inventory = [];
	}

	public setItem(item: Item): void {
		if (this.client === null) {
			return;
		}

		let playerInventorySlot = new PacketWriter()
			.setType(PacketTypes.PlayerInventorySlot)
			.packByte(this.id)
			.packInt16(item.slot)
			.packInt16(item.stack)
			.packByte(item.prefix)
			.packInt16(item.netID)
			.data;

		this.client.socket.write(playerInventorySlot);
	}

	public restoreSavedMaxHealth(): void {
		if (this.client === null) {
			return;
		}

		let playerLife = new PacketWriter()
			.setType(PacketTypes.PlayerHP)
			.packByte(this.id)
			.packInt16(this.life)
			.packInt16(this.life)
			.data;

		this.client.socket.write(playerLife);
	}

	/**
	 * @deprecated Use restoreSavedMaxHealth instead
	 */
	public setLife(): void {
		this.restoreSavedMaxHealth();
	}

	public restoreSavedMaxMana(): void {
		if (this.client === null) {
			return;
		}

		let playerMana = new PacketWriter()
			.setType(PacketTypes.PlayerMana)
			.packByte(this.id)
			.packInt16(this.mana)
			.packInt16(this.mana)
			.data;

		this.client.socket.write(playerMana);
	}

	/**
	 * @deprecated Use restoreSavedMaxMana instead
	 */
	public setMana(): void {
		this.restoreSavedMaxMana();
	}

	public setVisuals(): void {
		if (this.client === null) {
			return;
		}

		this.client.socket.write(PlayerInfo.toBuffer({
			playerId: this.id,
			skinVariant: this.skinVariant,
			hair: this.hair,
			name: this.name,
			hairDye: this.hairDye,
			hideVisuals: this.hideVisuals,
			hideVisuals2: this.hideVisuals2,
			hideMisc: this.hideMisc,
			hairColor: this.hairColor,
			skinColor: this.skinColor,
			eyeColor: this.eyeColor,
			shirtColor: this.shirtColor,
			underShirtColor: this.underShirtColor,
			pantsColor: this.pantsColor,
			shoeColor: this.shoeColor,
			difficulty: this.difficulty,
			mode: this.mode,
			extraAccessory: this.extraAccessory,
			usingBiomeTorches: this.usingBiomeTorches,
			unlockedBiomeTorches: this.unlockedBiomeTorches,
			happyFunTorchTime: this.happyFunTorchTime,
		}));
	}
}

export default Player;
